<UserControl x:Class="Sinboda.Framework.Control.MultiCheckComboBox.MultiSelectComboBox"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:Sinboda.Framework.Control.MultiCheckComboBox"
             mc:Ignorable="d" 
             d:DesignHeight="40" d:DesignWidth="180">
    <UserControl.Resources>
        <Style TargetType="{x:Type ComboBoxItem}">
            <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}"/>
            <Setter Property="FontSize" Value="{DynamicResource ContentFontSize}"/>
            <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
            <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
            <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
            <Setter Property="Padding" Value="5"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderBrush" Value="#FFF1F1F1"/>
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                        <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="0,1,0,0"
                        Background="{TemplateBinding Background}" 
                        Padding="{TemplateBinding Padding}" 
                        SnapsToDevicePixels="true">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsHighlighted" Value="true">
                                <Setter Property="Background" TargetName="Bd" Value="#FFD1DEED"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </UserControl.Resources>
    <ComboBox
    x:Name="MultiSelectCombo"  
    SnapsToDevicePixels="True"
    OverridesDefaultStyle="True"
    Background="White"
    IsEnabled="{Binding IsEnabled}"
    ScrollViewer.HorizontalScrollBarVisibility="Auto"
    ScrollViewer.VerticalScrollBarVisibility="Auto"
    ScrollViewer.CanContentScroll="True"
    HorizontalContentAlignment="Stretch"
    IsSynchronizedWithCurrentItem="True">

        <!-- 设置ComboBox下拉列表Item的样式模板 -->
        <ComboBox.ItemTemplate>
            <!-- 下拉列表Item的样式数据模板绑定CheckBox -->
            <DataTemplate>
                <Grid Background="Transparent"  MouseDown="Grid_MouseDown">
                    <CheckBox x:Name="checkBox" Content="{Binding Title}" IsChecked="{Binding Path=IsSelected, Mode=TwoWay}" HorizontalAlignment="Stretch"   HorizontalContentAlignment="Stretch"
                      Tag="{RelativeSource FindAncestor, AncestorType={x:Type ComboBox}}" Click="CheckBox_Click"
                      VerticalAlignment="Center" VerticalContentAlignment="Center"/>
                </Grid>

            </DataTemplate>
        </ComboBox.ItemTemplate>

        <!-- 设置整个ComboBox的样式模板 -->
        <!-- 该样式模板由两部分组成，一个是ToggleButton,一个是Popup -->
        <ComboBox.Template>
            <ControlTemplate TargetType="ComboBox">
                <Grid >
                    <!-- 设置ToggleButton的样式模板，IsChecked：该属性与Combox下拉列表是否打开的状态绑定 -->
                    <ToggleButton x:Name="ToggleButton" Grid.Column="2"
                              Background="{TemplateBinding Background}" 
                              IsEnabled="{TemplateBinding IsEnabled}"
                              IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                              Focusable="false" ClickMode="Press" HorizontalContentAlignment="Left" >
                        <ToggleButton.Template>
                            <ControlTemplate TargetType="ToggleButton">
                                <Grid>
                                    <!-- 该Grid分为两列，一列放多选的显示文本，一列放箭头图标 -->
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="18"/>
                                        <ColumnDefinition Width="5"/>
                                    </Grid.ColumnDefinitions>

                                    <!-- Border相当于html中的Span标签， ColumnSpan：该Border跨两列，CornerRadius：设置ToggleButton圆角样式的弧度。按代码位置，该Border在最上层。-->
                                    <Border x:Name="Border" Grid.ColumnSpan="3" CornerRadius="2" Background="{TemplateBinding Background}" 
                                        BorderBrush="{DynamicResource BoxBorderBrush}" BorderThickness="1,1,1,1">
                                    </Border>

                                    <!-- 该Border绑定了一个TextBlock(文本块)，TextBlock绑定.xaml.cs文件中的Text属性。Text显示的是多选的内容 -->
                                    <Border x:Name="BorderComp" Grid.Column="0" CornerRadius="2" Margin="1" BorderBrush="{DynamicResource BoxBorderBrush}" BorderThickness="0,0,0,0" >
                                        <TextBlock Text="{Binding Path=Text,RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=UserControl}}" HorizontalAlignment="Stretch" VerticalAlignment="Center" Padding="3" />
                                    </Border>

                                    <!-- 用来显示三角符号的 -->
                                    <Path x:Name="Arrow" Data="M 0 0 L 5 5.5 L 10 0 Z" Fill="#FF999999" Grid.Column="1" HorizontalAlignment="Center" VerticalAlignment="Center" RenderTransformOrigin="0.5,0.5">
                                        <Path.RenderTransform>
                                            <TransformGroup>
                                                <ScaleTransform/>
                                                <SkewTransform/>
                                                <RotateTransform/>
                                                <TranslateTransform/>
                                            </TransformGroup>
                                        </Path.RenderTransform>
                                    </Path>

                                    <!--三角符号动画效果-->
                                    <VisualStateManager.VisualStateGroups>
                                        <VisualStateGroup x:Name="CheckStates">
                                            <VisualState x:Name="Checked">
                                                <Storyboard>
                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="Arrow">
                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="180">
                                                            <EasingDoubleKeyFrame.EasingFunction>
                                                                <QuadraticEase EasingMode="EaseIn"/>
                                                            </EasingDoubleKeyFrame.EasingFunction>
                                                        </EasingDoubleKeyFrame>
                                                    </DoubleAnimationUsingKeyFrames>
                                                </Storyboard>
                                            </VisualState>
                                            <VisualState x:Name="Unchecked">
                                                <Storyboard>
                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="Arrow">
                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0">
                                                            <EasingDoubleKeyFrame.EasingFunction>
                                                                <QuadraticEase EasingMode="EaseOut"/>
                                                            </EasingDoubleKeyFrame.EasingFunction>
                                                        </EasingDoubleKeyFrame>
                                                    </DoubleAnimationUsingKeyFrames>
                                                </Storyboard>
                                            </VisualState>
                                        </VisualStateGroup>
                                    </VisualStateManager.VisualStateGroups>
                                </Grid>

                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsMouseOver" Value="true">
                                        <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource BoxMouseOverBorderBrush}"/>
                                        <Setter TargetName="Arrow" Property="Fill" Value="Black"/>

                                    </Trigger>
                                    <Trigger Property="IsEnabled" Value="false">
                                        <Setter TargetName="Border" Property="Background" Value="#FFEBEBEB"/>
                                    </Trigger>
                                    <Trigger Property="IsChecked" Value="true">
                                    </Trigger>

                                </ControlTemplate.Triggers>
                            </ControlTemplate>

                        </ToggleButton.Template>

                    </ToggleButton>

                    <!-- 设置Popup的样式模板，IsOpen:该属性与ComboBox下拉列表是否打开的属性绑定，Placement：Popup弹出位置，在底部；AllowsTransparency：获取或设置一个值,该值表示 Popup 控件是否可以包含透明的部分 -->
                    <!-- Popup是弹出框，类似于Windows的开始菜单，点击一下，弹出来，在点击一下收回去 -->
                    <Popup Name="Popup" Placement="Bottom" AllowsTransparency="True" Focusable="False"  IsOpen="{TemplateBinding IsDropDownOpen}" PopupAnimation="Slide">
                        <Grid Name="DropDown" SnapsToDevicePixels="True" MinWidth="{TemplateBinding ActualWidth}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                            <Border x:Name="DropDownBorder" BorderThickness="1" Background="White" BorderBrush="{DynamicResource BoxBorderBrush}"/>

                            <!-- 添加滚动条 -->
                            <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True" DataContext="{Binding}">
                                <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                            </ScrollViewer>
                        </Grid>
                    </Popup>
                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger Property="HasItems" Value="false">
                        <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95"/>
                    </Trigger>

                    <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
                        <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="4"/>
                        <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0"/>
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
        </ComboBox.Template>
    </ComboBox>
</UserControl>
